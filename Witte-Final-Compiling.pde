////Brian Witte
////FINAL
////BAM, CST Mon 6-9


////after debugging for what seemed like an eternity, I finally got it to compile.
//The arguments I used to try to get the alternating array to show may have screwed up how my data is being put into the fucntions. 
//They were logically sound in my head, but that doesnt count for much.




String[] names = {"Anita", "Cathy", "Chad", "Dan", "David", "Elizabeth", "Enrique", 
"Erona", "Gordon", "Greg", "Jennifer", "Jill", "Kathy", "Kim", "Kirk", "Mark", 
"Melissa", "Mina", "Mitch", "Narie", "Sabita", "Roberta", "Ryan", "Scott"}; 

int lights=1;
////GROUND////
float horizon;
////HEIGHT RANGE////
float hmin, hmax;
//float q=(hmax-hmin)/2;
////WEIGHT RANGE////
float wmin, wmax;
//float r=(wmax-wmin)/2;


////Number of people generated by our array for the sameple size. (The first array we came to class with. 
int many= 10;
int a=many;
Person[] people = new Person[many];

////this is where I am making the new array of people. I decided to keep the Person class which wouldn't cause any interference later on when it tries to call a name from a string. I would rather make the change in a method than in the object class.
int many2=11;
Person[] bri= new Person[many2];



Button buttons[]=new Button[5];
int numButtons=5;
//This string will allow me to have a pool of names to pick from for the buttons, just like the stat subjects.
String buttonNames[]= {  "Tallest", "widest", "Raise", "Bonus", "Change"};
float total;
float raise;
int salary;
int age;
int bonus = 1000;
void setup(){
  
  size(750,550);
  
  horizon = height/1.5;
  
  ////The people's sizes are bound to constraints to keep it more realistic.  
  hmin = 48;      
  hmax = 90;      
  wmin = 40;       
  wmax = 60;
  bonus= 1000;
  //salary= random(1000,100000);
  ////Initializing our test subjects of the first array, during the daytime.
  for(int n = 0; n < many; n++){
    if(lights>0) {
      people[n] = new Person();
      people[n].startup();
      people[n].x = 70 + (n * 70);
      //}else{
        //return;
    }
  }
  
  ////Initializing our test subjects of the second array, during the night.
  for(int n = 0; n<many2; n++){
    if(lights<0) {
      bri[n]= new Person();
      bri[n].startup();
      bri[n].x= (width/12)+(n*(width/12));
    //}else{
      //return;
    }
  }
  /*////Set up the new array to fit the parameters of the change to nighttime.
  for (int n=0; n<many2; n++) {
    bri[n]= new Person();
    bri[n].startup();
  }
  for(int n=0; n<many2; n++)
  bri[n].x= (width/12)+((n*width)/(12));*/
  
  
  //I added a new function to the setup in order to make the buttons appear
  makebuttons();
}

//the three buttons will be put in a column on the righthand side of the screen.
void makebuttons() {
  buttons= new Button[numButtons];
  float x=550, y=50;
  for (int n=0; n<numButtons; n++) {
    buttons[n]= new Button( x, y, buttonNames[n] );
    y+=30;
  }
}  
void reset() {
  for (int n=0; n<many; n++ ) {
    if(lights>0){
      //--  people[n]=  new Person( who[n] );
      people[n]=  new Person( );
    }
  }
  for (int n=0;n<many2; n++) {
    if(lights<0) {
      //--  bri[n]= new Person( who[n]);
      bri[n]= new Person( );
    }
  }
}
void draw(){
  scene();
  show();
  stats();
  raise( people, many);
  bonus( people, many );
  messages();
  change();
  //clouds();
  grass();
  ////draw the newly added buttons.
  buttons();
}
  
  
  
////for each occurance of the people[] array...
void raise( Person[] p, int many ) {
  for (int n=0; n<many; n++ ) {
    if (p[n].salary < 25000) {
      p[n].salary *= 1.20;        // Grow 20%
    }else{
      p[n].salary*=1.00;        // dont grow
    } 
    if (p[n].salary >25000 && p[n].salary<50000) {
      //give the appropriate people their raises.
      p[n].salary *= 1.15;        // Grow 15%
    }else{
      p[n].salary*=1.00;        //no growth
    } 
    if(p[n].salary >50000 && p[n].salary<75000) {
      p[n].salary *= 1.10;        //Grow 10%
    }else{
      p[n].salary *= 1.00;        // no growth
    }
    if(p[n].salary > 75000) {
      p[n].salary *= 1.05;        //Grow 5%
    }else{
      p[n].salary *= 1.10;        //no Growth  
    }
  }
}  
  
  
  
  
  

////Making sure the right people get their raises
void bonus(Person[] p, int many) {
  int bonus=1000;
  for(int n=0; n<many; n++){
    if(p[n].age>= 18) {
      salary=p[n].salary+bonus;      ////bonus
    }else{
      salary=p[n].salary+0;          ////no bonus
    }
  }
}


////quick change fucntion to make day to night even though it may not appear that way
void change() {
  int lights=1;
  if(lights>0) {
    lights=lights*-1;
  }
}
void buttons(){
  for (int n=0; n<numButtons; n++) {
     buttons[n].show();
  }
}
void grass() {
  float wave= lights>0?10:-10;
  stroke(255,254,0);                  ////almost the same color as the sun
  strokeWeight(5);
  for(float x=100; x<width; x+=40) {
    line(x,height,x+wave, height-40);
  }
  strokeWeight(2);
}


////The function stats allows us to generate each indivuiduals height and weight (their statistics) 
void stats(){
  hMean();
  wMean();
}

void wMean(){
  float average = 0;
  for(int n=0; n<many; n++){
    average += people[n].weight;
  }
  average = int(average/a);
  text("Mean Weight: " + average + "lbs", (width/2)-50, (horizon *(3/2)) + 120);
}

void hMean(){
  int feet, inches;
  float average = 0;
  for(int n = 0; n < a; n++){
    average += people[n].h;
  }
  
  //Find the mean height
  average = (average / a);
  //take the individual's height and divide by 12 to get how many feet tall they are.
  feet = int(average/12);
  //the %12 lets us take the leftovers from whenever the last time that 12 went into the quotient. this gives us the inch value.
  inches = int(average%12);
  text("Mean Height: " + feet + "'" + inches + "''", (width/2)-50, (horizon *(3/2))+110);
}

void scene(){  
  noStroke();
  ////Sky
  rectMode(CORNER);
  fill(150, 200, 250);              
  rect(0,0, width, horizon);
  
  ////Ground or grass
  fill(0,255,0);
  rect(0,horizon,width,height);    
}
////DISPLAYING people////
void show(){
  if(lights>0){
    for(int n = 0; n < many; n++){       
      people[n].placement();
      people[n].show();
    }
  }
  if(lights<0) {
    for (int n=0; n<many2;n++) {
      bri[n].placement();
      bri[n].show();
    }
  }
}


void keyPressed(){
  if (key == 'r'){
    for(int n = 0; n < many; n++){
      people[n].startup();
    }
  }
  else if (key=='t') tallest(people, many);
  else if (key=='w') widest(people, many);
  else if (key=='1') raise(people, many);
  else if (key=='2') bonus(people, many);
  else if (key=='3') change();
}
void mousePressed() {
  if(buttons[0].click(mouseX,mouseY)){ 
    tallest(people,many); 
    return; 
  }
  if(buttons[1].click(mouseX,mouseY)){ 
    widest(people, many); 
    return; 
  }
  if(buttons[2].click(mouseX,mouseY)){ 
    raise(people, many); 
    return; 
  }
  if(buttons[3].click(mouseX,mouseY)){ 
    bonus(people, many); 
    return; 
  }
  if(buttons[4].click(mouseX,mouseY)){ 
    reset(); 
    return; 
  }
}
////Find the Tallest////
void tallest( Person[] p,int many) {
  ////place the largest number at the end of the array
  ////swap the rest of the elements in the array to accomodate the bump to the end
  int q;
  q =whereTallest(p,many);
  swap(p, q, many-1);
}
int whereTallest( Person[] p, int many ) {
  int q=0;
  for (int n=1; n<many; n++ ) {
    if ( p[n].h > p[q].h ) q=n;
  }
  return q;
}
////select the tallest
/*int whereTallest( Person[] p, int many){
  int q=0;
  for (int n=1; n<many; n++){
    if (p[n]>p[q]) w=n;
  }
}
*/
////find the widest////
void widest( Person[] p, int many) {
  ////just like big, we find the fattest and we can swap all the numbers accordingly
  int q=whereWidest(p,many);
  swap(p, q, many-1);
}
////select the widest
//since I had already used w as the swapping variable, and i had it as the class.w=class width.
//i swapped w for q and i will change it in the swap function
int whereWidest(Person[] p, int many ) {
  int q=0;
  for (int n=1; n<many; n++ ) {
    if ( p[n].w > p[q].w ) q=n;
  }
  return q;
}
void swap( Person[] p, int q, int many ) {
  Person tmp;
  tmp=  p[many-1];
  p[many-1]=  p[q];
  p[q]=  tmp;
}



void messages(){
 textSize(10);
 text("Project 5: Precursor to the final", 25,25);
 textSize(10);
 text("AUTHOR: Brian Witte", 20, 50);
}


class Person{
  
  float r,g,b;     //colors
  float w1, w2;    //Randomize each width
  float h1, h2;    //Randomize each height
  float w,h;       //width and height
  float x,y;       //x and y position
  
  int feet, inches;
  int weight;
  int age;         //Give the age of the person
  int salary;        //How much they make
  ////Take a name from the random sample of names given. 
  String name;
  
  void startup(){
    r = random(0,255);          
    g = random(0,255);
    b = random(0,255);
    //age = int(random(1-99));
    //salary=int(random(1000,100000));
    w1 = random(wmin*.5,wmax*.5);    
    w2 = random(wmin*.5,wmax*.5);    
    ////the more Mean values we use in our results, will likely cause there to be less outliers and more closely applicable to real life
    h1 = random(hmin*.5,hmax*.5);    
    h2 = random(hmin*.5,hmax*.5);
    
    w = w1 + w2;  
    h = h1 + h2;
    
    name = names[int(random(0,names.length))];
  }
  
  void placement(){
    y = horizon - (h/2);  //feet stay on the ground (horizon) because the center of the body starts at horizon-.5*height)
  }
  
  void body(){
    noStroke();
    ////This will call upon the constructor to make their RGB values random each time.
    fill(r,g,b);
    rectMode(CENTER);
    //Body of person
    rect(x,y,w,h);
    ////A simple line to give the profile of the legs. This will scale with the height as well.
    stroke(0);
    line(x, h+280, x, horizon);
    //Head with a mouth and eyes
    ellipse(x, (y - (h/2) - (h/6)), w, h/3);  
    
    fill(0);
    rect(x, (y - (h/2) - (h/6)), w/5, h/6);  
    ellipse(x - w/4, (y - (h/2) - (h/4)), w/5, w/8);        
    ellipse(x + w/4, (y - (h/2) - (h/4)), w/8, w/5);
  }
  
  void show(){
    body();                 //The shape of the person
    stats();                //Persons unique traits
    messages();             //Displaying the important stuff, what makes each of them different
  }
  
  void stats(){ 
    ////Height/12= feet
    feet = int((h/12)); 
    ////The leftovers from the feet are then presented as inches
    inches = int(h % 12);
    salary = int(random(1000,100000));
    age = int(random(1-99));
    weight = int(((2 * h) * w)/40);  
  }
  
  void messages(){
    textSize(10);
    text(name, x - w/2, y + h/2 + 25);
    text(feet + "'" + inches + "''",x - w/2, y + h/2 + 35);
    text(weight + "lbs", x- w/2,  y + h/2 + 45);
    text(age + "years old", x- w/2,  y + h/2 + 55);
    text("$"+salary, x- w/2,  y + h/2 + 65); 
  }
}

class Button {
  String name=" ";
  float x,y;
  float w=75, h=30;
  float r=255, g=255, b=255;
  Button(float x, float y, String name ) {
    this.name= name;
    this.x=x;
    this.y=y;
  }
  void show() {
    fill(r,g,b);
    rectMode(CORNER);
    stroke(0);
    strokeWeight(2);
    rect( x, y, w, h );
    strokeWeight(1);
    fill( 0 );
    text( name, x, y+h*2/3 );
  }//Boolean methods for testing the buttons
  boolean click(float xx, float yy){
    if(xx<x) return false;
    if(xx>x+w) return false;
    if(yy<y) return false;
    if(yy>y+h)return false;
      return true;
  }
}
